name: Build and deploy to dev-gcp
on:
  push:
    branches:
      - 'main'
env:
  APP: rust-poc
jobs:
  build-and-publish:
    name: Build and publish Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create version and image name
        run: |
          TIME=$(TZ="Europe/Oslo" date +%Y.%m.%d-%H.%M)
          COMMIT=$(git rev-parse --short=8 HEAD)
          VERSION=$TIME-$COMMIT
          echo "::set-env name=IMAGE::"docker.pkg.github.com/${GITHUB_REPOSITORY}/$APP:$VERSION""
          echo "::set-env name=VERSION::"$VERSION""
      - run: echo $VERSION > VERSION.txt
      - name: Upload VERSION to next job
        uses: actions/upload-artifact@v1
        with:
          name: VERSION.txt
          path: VERSION.txt
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git/
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target/
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
      - name: Build binary
        run: cargo build --release
      - name: Build and publish Docker image
        run: |
          TIME=$(date +'%Y-%m-%d')
          cp target/release/rust-poc .
          docker build -t ${IMAGE}:${TIME}-${GITHUB_SHA::8} .
          docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p ${{ secrets.ACCESS_TOKEN }}
          docker push ${IMAGE}

  deploy-to-dev-fss:
    name: Deploy to dev-gcp
    runs-on: ubuntu-latest
    needs: build-and-publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download VERSION
        uses: actions/download-artifact@v1
        with:
          name: VERSION.txt
          path: .
      - run: echo "::set-env name=VERSION::"`cat VERSION.txt`""
      - run: echo "::set-env name=IMAGE::"docker.pkg.github.com/${GITHUB_REPOSITORY}/$APP:$VERSION""
      - uses: nais/deploy/actions/deploy@v1
        name: Deploy to dev-gcp
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: nais.yaml